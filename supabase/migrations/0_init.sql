-- Create a table for user profiles
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  "name" text,
  "codename" text,  
  "pin" text,
  "photo" text,  
  "description" text,
  "region" text,
  "city" text,
  "palm_left" text,
  "palm_right" text,
  "blood" text,    
  "disability" text,      
  updated_at timestamp with time zone,
  created_at timestamp with time zone default now()
);
-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security for more details.
-- alter table profiles enable row level security;

create policy "Profiles are viewable by self." on profiles
  for select using (auth.uid() = id);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);


create table posts (
  -- id bigint generated by default as identity primary key,
  -- user_id uuid not null,
  id serial not null primary key,  
  user_id uuid references auth.users on delete cascade not null,  
  -- user_id uuid references auth.users on delete cascade not null primary key,  
  "content" text,
  updated_at timestamp with time zone,
  created_at timestamp with time zone default now()
);


create table items (
  id serial not null primary key,    
  user_id uuid references auth.users on delete cascade not null,    
  "name" text not null, 
  "description" text,
  "points" decimal,
  "price" decimal,
  "region" text,
  "city" text,
  "photo" text,
  "photo1" text,
  "photo2" text,
  "photo3" text,      
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone null
  -- constraint user_products_pkey primary key (user_id, type),
  -- constraint user_products_pkey primary key (user_id),    
  -- -- constraint user_products_pkey primary key (user_id, stripe_product_id, type),
  -- constraint user_products_user_id_fkey foreign key (user_id) references auth.users (id) on update cascade on delete cascade
);
-- alter table items enable row level security;

create table orgs (
  id serial not null primary key,    
  user_id uuid references auth.users on delete cascade not null,    
  owner_id uuid references auth.users on delete cascade not null,
  "name" text not null, 
  "description" text,
  "phone" text,
  "mobile" text,
  "email" text,
  "city" text,  
  "region" text,
  "address" text,
  "logo" text,
  "url1" text,
  "url2" text,
  "url3" text,
  "url4" text,      
  "url5" text,  
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone null
  -- constraint user_products_pkey primary key (user_id, type),
  -- constraint user_products_pkey primary key (user_id),    
  -- -- constraint user_products_pkey primary key (user_id, stripe_product_id, type),
  -- constraint user_products_user_id_fkey foreign key (user_id) references auth.users (id) on update cascade on delete cascade
);


create table transactions (
  id serial not null primary key,    
  giver_id uuid references auth.users on delete cascade not null,    
  getter_id uuid references auth.users on delete cascade not null,      
  transferee_id uuid references auth.users on delete cascade,   
  "name" text, 
  "notes_admin" text, 
  "notes" text,
  "points" decimal,
  "amount" decimal,
  "photo" text,
  "city" text,  
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone null
  -- constraint user_products_pkey primary key (user_id, type),
  -- constraint user_products_pkey primary key (user_id),    
  -- -- constraint user_products_pkey primary key (user_id, stripe_product_id, type),
  -- constraint user_products_user_id_fkey foreign key (user_id) references auth.users (id) on update cascade on delete cascade
);
      

-- Create a table for "Contact Us" form submissions
-- Limit RLS policies -- only server side access
create table contact_messages (
  -- id uuid primary key default gen_random_uuid(),
  id serial primary key,
  "name" text,
  email text,
  "subject" text,
  body text,
  updated_at timestamp with time zone,
  created_at timestamp with time zone default now()
);
-- alter table contact_messages enable row level security;


-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, "name")
  values (new.id, new.raw_user_meta_data->>'name');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Function to check whether a user has password set
create function public.user_password_set()
returns boolean as $$
begin
  return exists (select 1 from auth.users where id = auth.uid() and length(auth.users.encrypted_password) > 0);
end;
$$ language plpgsql security definer;
